(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     90427,       1869]
NotebookOptionsPosition[     88049,       1779]
NotebookOutlinePosition[     88406,       1795]
CellTagsIndexPosition[     88363,       1792]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["1D", "Section",
 CellChangeTimes->{{3.602328369743721*^9, 3.602328370182537*^9}}],

Cell[CellGroupData[{

Cell["general case:", "Subsection",
 CellChangeTimes->{{3.6023293026860332`*^9, 3.602329308779759*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sol1D", " ", "=", " ", 
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"E", "^", 
        RowBox[{"(", 
         RowBox[{"I", " ", "Rx", "*", 
          RowBox[{"(", 
           RowBox[{"K0x", "+", 
            RowBox[{"D0x", " ", "t1"}]}], ")"}]}], ")"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"t1", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
     "ComplexExpand"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol1Dre", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", "sol1D", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol1Dim", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Im", "[", "sol1D", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.602326936061393*^9, 3.602326952330278*^9}, {
  3.602327643490148*^9, 3.6023276463735867`*^9}, {3.602328282066845*^9, 
  3.602328292729933*^9}, {3.602328593826507*^9, 3.602328633608653*^9}, {
  3.602328730464343*^9, 3.602328733624093*^9}, {3.602329268526224*^9, 
  3.602329285181939*^9}, {3.602329826635257*^9, 3.602329847685851*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol1Dre", "]"}]], "Input",
 CellChangeTimes->{{3.6023282215324793`*^9, 3.602328223587694*^9}, {
  3.602328298506289*^9, 3.602328298625227*^9}}],

Cell["\<\
(Cos(K0x*Rx)*Sin(D0x*Rx) - Sin(K0x*Rx) + Cos(D0x*Rx)*Sin(K0x*Rx))/(D0x*Rx)\
\>", "Output",
 CellChangeTimes->{3.602328225629356*^9, 3.602328399549625*^9, 
  3.602329312495077*^9, 3.6023296279383163`*^9, 3.602329997995883*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol1Dim", "]"}]], "Input",
 CellChangeTimes->{{3.602328307275016*^9, 3.60232830781782*^9}}],

Cell["\<\
-((-Cos(K0x*Rx) + Cos(D0x*Rx)*Cos(K0x*Rx) - Sin(D0x*Rx)*Sin(K0x*Rx))/(D0x*Rx))\
\>", "Output",
 CellChangeTimes->{3.602328399666994*^9, 3.6023293125530033`*^9, 
  3.602329627976139*^9, 3.602329998037792*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["testing:", "Subsection",
 CellChangeTimes->{{3.602329280593232*^9, 3.602329282445134*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"sol", "=", 
     RowBox[{
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"E", "^", 
         RowBox[{"(", 
          RowBox[{"I", " ", "Rx", " ", "kx"}], ")"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"kx", ",", "K0x", ",", "K1x"}], "}"}]}], "]"}], "//", 
      "ComplexExpand"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"sol", " ", "=", " ", 
    RowBox[{"sol", "/.", 
     RowBox[{"{", 
      RowBox[{"K1x", "\[Rule]", " ", 
       RowBox[{"K0x", "+", "D0x"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"sol1D", "*", "D0x"}], "-", "sol"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6023284260250196`*^9, 3.60232849214642*^9}, {
  3.6023285338358097`*^9, 3.602328608632799*^9}, {3.602329271025104*^9, 
  3.602329271961912*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"Cos", "[", 
       RowBox[{"K0x", " ", "Rx"}], "]"}], "Rx"], "-", 
     FractionBox[
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"D0x", "+", "K0x"}], ")"}], " ", "Rx"}], "]"}], "Rx"]}], 
    ")"}]}], "-", 
  FractionBox[
   RowBox[{"Sin", "[", 
    RowBox[{"K0x", " ", "Rx"}], "]"}], "Rx"], "+", 
  FractionBox[
   RowBox[{"Sin", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"D0x", "+", "K0x"}], ")"}], " ", "Rx"}], "]"}], 
   "Rx"]}]], "Output",
 CellChangeTimes->{{3.60232847384921*^9, 3.602328492604307*^9}, {
   3.602328560942688*^9, 3.6023286091284*^9}, 3.602329316880073*^9, 
   3.602329628054554*^9, 3.60232999811313*^9}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.60232847384921*^9, 3.602328492604307*^9}, {
   3.602328560942688*^9, 3.6023286091284*^9}, 3.602329316880073*^9, 
   3.602329628054554*^9, 3.6023299981550303`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2D", "Section",
 CellChangeTimes->{{3.602328376832128*^9, 3.6023283772861567`*^9}}],

Cell[CellGroupData[{

Cell["general case:", "Subsection",
 CellChangeTimes->{{3.602328890523547*^9, 3.602328893977235*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sol2D", " ", "=", " ", 
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"E", "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"I", " ", "Rx", "*", 
             RowBox[{"(", 
              RowBox[{"K0x", "+", 
               RowBox[{"D1x", " ", "t1"}], "+", 
               RowBox[{"D2x", " ", "t2"}]}], ")"}]}], "+", 
            RowBox[{"I", " ", "Ry", "*", 
             RowBox[{"(", 
              RowBox[{"K0y", "+", 
               RowBox[{"D1y", " ", "t1"}], "+", 
               RowBox[{"D2y", " ", "t2"}]}], ")"}]}]}], ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"t2", ",", "0", ",", 
           RowBox[{"1", "-", "t1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t1", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
     "ComplexExpand"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol2Dre", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", "sol2D", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol2Dim", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Im", "[", "sol2D", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.602326081728479*^9, 3.602326129991375*^9}, {
   3.602326431398636*^9, 3.6023264537836657`*^9}, {3.602326604076788*^9, 
   3.6023266285293016`*^9}, 3.602326671895795*^9, {3.6023267897899103`*^9, 
   3.6023267900543213`*^9}, {3.60232726689881*^9, 3.6023273017441053`*^9}, {
   3.602327685485071*^9, 3.6023277202527313`*^9}, {3.602327865736018*^9, 
   3.602327870988944*^9}, {3.602328105568264*^9, 3.602328143773983*^9}, {
   3.602329566719927*^9, 3.6023295673896017`*^9}, {3.6023298540591927`*^9, 
   3.6023298554042788`*^9}, {3.6023299448243504`*^9, 3.602329974811305*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol2Dre", "]"}]], "Input",
 CellChangeTimes->{{3.602328152706668*^9, 3.602328153430044*^9}}],

Cell["\<\
(-(D1x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry)) + D2x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry) - \
D1y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry) + D2y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry) + 
     D1x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry) - \
D2x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry) + \
D1y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry) - 
     D2y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry) - \
D1x*Rx*Cos(K0x*Rx)*Cos(D1x*Rx + (D1y + K0y)*Ry) - \
D1y*Ry*Cos(K0x*Rx)*Cos(D1x*Rx + (D1y + K0y)*Ry) + 
     D1x*Rx*Cos(K0x*Rx)*Cos(D2x*Rx + (D2y + K0y)*Ry) + \
D1y*Ry*Cos(K0x*Rx)*Cos(D2x*Rx + (D2y + K0y)*Ry) + \
D1x*Rx*Sin(K0x*Rx)*Sin(K0y*Ry) - D2x*Rx*Sin(K0x*Rx)*Sin(K0y*Ry) + 
     D1y*Ry*Sin(K0x*Rx)*Sin(K0y*Ry) - D2y*Ry*Sin(K0x*Rx)*Sin(K0y*Ry) - \
D1x*Rx*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx)*Sin(K0y*Ry) + D2x*Rx*Cos(D1x*Rx + \
D1y*Ry)*Sin(K0x*Rx)*Sin(K0y*Ry) - 
     D1y*Ry*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx)*Sin(K0y*Ry) + D2y*Ry*Cos(D1x*Rx \
+ D1y*Ry)*Sin(K0x*Rx)*Sin(K0y*Ry) - D1x*Rx*Cos(K0y*Ry)*Sin(K0x*Rx)*Sin(D1x*Rx \
+ D1y*Ry) + 
     D2x*Rx*Cos(K0y*Ry)*Sin(K0x*Rx)*Sin(D1x*Rx + D1y*Ry) - \
D1y*Ry*Cos(K0y*Ry)*Sin(K0x*Rx)*Sin(D1x*Rx + D1y*Ry) + \
D2y*Ry*Cos(K0y*Ry)*Sin(K0x*Rx)*Sin(D1x*Rx + D1y*Ry) - 
     D1x*Rx*Cos(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + \
D2x*Rx*Cos(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - \
D1y*Ry*Cos(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + 
     D2y*Ry*Cos(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + \
D1x*Rx*Sin(K0x*Rx)*Sin(D1x*Rx + (D1y + K0y)*Ry) + \
D1y*Ry*Sin(K0x*Rx)*Sin(D1x*Rx + (D1y + K0y)*Ry) - 
     D1x*Rx*Sin(K0x*Rx)*Sin(D2x*Rx + (D2y + K0y)*Ry) - \
D1y*Ry*Sin(K0x*Rx)*Sin(D2x*Rx + (D2y + K0y)*Ry))/((D1x*Rx + D1y*Ry)*(D1x*Rx - \
D2x*Rx + D1y*Ry - D2y*Ry)*(D2x*Rx + D2y*Ry))\
\>", "Output",
 CellChangeTimes->{3.602328154747676*^9, 3.602329581441629*^9, 
  3.602329632071911*^9, 3.6023298661084223`*^9, 3.60233000203614*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol2Dim", "]"}]], "Input"],

Cell["\<\
(-(D1x*Rx*Cos(K0y*Ry)*Sin(K0x*Rx)) + D2x*Rx*Cos(K0y*Ry)*Sin(K0x*Rx) - \
D1y*Ry*Cos(K0y*Ry)*Sin(K0x*Rx) + D2y*Ry*Cos(K0y*Ry)*Sin(K0x*Rx) + 
     D1x*Rx*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx) - \
D2x*Rx*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx) + \
D1y*Ry*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx) - 
     D2y*Ry*Cos(K0y*Ry)*Cos(D1x*Rx + D1y*Ry)*Sin(K0x*Rx) - D1x*Rx*Cos(D1x*Rx \
+ (D1y + K0y)*Ry)*Sin(K0x*Rx) - D1y*Ry*Cos(D1x*Rx + (D1y + \
K0y)*Ry)*Sin(K0x*Rx) + 
     D1x*Rx*Cos(D2x*Rx + (D2y + K0y)*Ry)*Sin(K0x*Rx) + D1y*Ry*Cos(D2x*Rx + \
(D2y + K0y)*Ry)*Sin(K0x*Rx) - D1x*Rx*Cos(K0x*Rx)*Sin(K0y*Ry) + \
D2x*Rx*Cos(K0x*Rx)*Sin(K0y*Ry) - 
     D1y*Ry*Cos(K0x*Rx)*Sin(K0y*Ry) + D2y*Ry*Cos(K0x*Rx)*Sin(K0y*Ry) + \
D1x*Rx*Cos(K0x*Rx)*Cos(D1x*Rx + D1y*Ry)*Sin(K0y*Ry) - \
D2x*Rx*Cos(K0x*Rx)*Cos(D1x*Rx + D1y*Ry)*Sin(K0y*Ry) + 
     D1y*Ry*Cos(K0x*Rx)*Cos(D1x*Rx + D1y*Ry)*Sin(K0y*Ry) - \
D2y*Ry*Cos(K0x*Rx)*Cos(D1x*Rx + D1y*Ry)*Sin(K0y*Ry) + \
D1x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - 
     D2x*Rx*Cos(K0x*Rx)*Cos(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + \
D1y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - \
D2y*Ry*Cos(K0x*Rx)*Cos(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - 
     D1x*Rx*Sin(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + \
D2x*Rx*Sin(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - \
D1y*Ry*Sin(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) + 
     D2y*Ry*Sin(K0x*Rx)*Sin(K0y*Ry)*Sin(D1x*Rx + D1y*Ry) - \
D1x*Rx*Cos(K0x*Rx)*Sin(D1x*Rx + (D1y + K0y)*Ry) - \
D1y*Ry*Cos(K0x*Rx)*Sin(D1x*Rx + (D1y + K0y)*Ry) + 
     D1x*Rx*Cos(K0x*Rx)*Sin(D2x*Rx + (D2y + K0y)*Ry) + \
D1y*Ry*Cos(K0x*Rx)*Sin(D2x*Rx + (D2y + K0y)*Ry))/((D1x*Rx + D1y*Ry)*(D1x*Rx - \
D2x*Rx + D1y*Ry - D2y*Ry)*(D2x*Rx + D2y*Ry))\
\>", "Output",
 CellChangeTimes->{3.602328158646872*^9, 3.602329581482823*^9, 
  3.6023296321481647`*^9, 3.602329866162438*^9, 3.602330002079959*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["special case:", "Subsection",
 CellChangeTimes->{{3.602328902721569*^9, 3.6023289049991083`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sol2Db", " ", "=", " ", 
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"E", "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"I", " ", "Rx", "*", 
             RowBox[{"(", 
              RowBox[{"K0x", "+", 
               RowBox[{"D2x", " ", "t2"}]}], ")"}]}], "+", 
            RowBox[{"I", " ", "Ry", "*", 
             RowBox[{"(", 
              RowBox[{"K0y", "+", 
               RowBox[{"D2y", " ", "t2"}]}], ")"}]}]}], ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"t2", ",", "0", ",", 
           RowBox[{"1", "-", "t1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t1", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
     "ComplexExpand"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol2Dbre", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", "sol2Db", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol2Dbim", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Im", "[", "sol2Db", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.602327222610026*^9, 3.602327258345229*^9}, 
   3.602327300415164*^9, {3.6023277324932528`*^9, 3.602327742162815*^9}, 
   3.6023281263372307`*^9, {3.602329561959301*^9, 3.602329562831003*^9}, {
   3.602329858205338*^9, 3.602329859082837*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol2Dbre", "]"}]], "Input",
 CellChangeTimes->{{3.6023281878716393`*^9, 3.602328192924075*^9}}],

Cell["\<\
-((-Cos(K0x*Rx + K0y*Ry) + Cos(D2x*Rx + D2y*Ry)*Cos(K0x*Rx + K0y*Ry) + \
D2x*Rx*Sin(K0x*Rx + K0y*Ry) + D2y*Ry*Sin(K0x*Rx + K0y*Ry) - Sin(D2x*Rx + \
D2y*Ry)*Sin(K0x*Rx + K0y*Ry))/
     Power(D2x*Rx + D2y*Ry,2))\
\>", "Output",
 CellChangeTimes->{3.60232819407955*^9, 3.6023295826469297`*^9, 
  3.602329633294463*^9, 3.6023298672963257`*^9, 3.602330003202765*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol2Dbim", "]"}]], "Input",
 CellChangeTimes->{{3.602328201260631*^9, 3.602328202813888*^9}}],

Cell["\<\
(D2x*Rx*Cos(K0x*Rx + K0y*Ry) + D2y*Ry*Cos(K0x*Rx + K0y*Ry) - Cos(K0x*Rx + \
K0y*Ry)*Sin(D2x*Rx + D2y*Ry) + Sin(K0x*Rx + K0y*Ry) - Cos(D2x*Rx + \
D2y*Ry)*Sin(K0x*Rx + K0y*Ry))/
   Power(D2x*Rx + D2y*Ry,2)\
\>", "Output",
 CellChangeTimes->{3.602328203365262*^9, 3.6023295826882763`*^9, 
  3.602329633349865*^9, 3.602329867347269*^9, 3.602330003243145*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3D", "Section",
 CellChangeTimes->{{3.602328387679838*^9, 3.602328388110124*^9}}],

Cell[CellGroupData[{

Cell["general case:", "Subsection",
 CellChangeTimes->{{3.602328913760775*^9, 3.602328917743181*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sol3D", " ", "=", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"E", "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"I", " ", "Rx", "*", 
               RowBox[{"(", 
                RowBox[{"K0x", "+", 
                 RowBox[{"D1x", " ", "t1"}], "+", 
                 RowBox[{"D2x", " ", "t2"}], "+", 
                 RowBox[{"D3x", " ", "t3"}]}], ")"}]}], "+", 
              RowBox[{"I", " ", "Ry", "*", 
               RowBox[{"(", 
                RowBox[{"K0y", "+", 
                 RowBox[{"D1y", " ", "t1"}], "+", 
                 RowBox[{"D2y", " ", "t2"}], "+", 
                 RowBox[{"D3y", " ", "t3"}]}], ")"}]}], "+", 
              RowBox[{"I", " ", "Rz", "*", 
               RowBox[{"(", 
                RowBox[{"K0z", "+", 
                 RowBox[{"D1z", " ", "t1"}], "+", 
                 RowBox[{"D2z", " ", "t2"}], "+", 
                 RowBox[{"D3z", " ", "t3"}]}], ")"}]}]}], ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"t3", ",", "0", ",", 
             RowBox[{"1", "-", "t1", "-", "t2"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t2", ",", "0", ",", 
           RowBox[{"1", "-", "t1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t1", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
     "ComplexExpand"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol3Dre", " ", "=", " ", 
   RowBox[{
    RowBox[{"Re", "[", "sol3D", "]"}], "//", "ComplexExpand"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol3Dim", " ", "=", " ", 
   RowBox[{
    RowBox[{"Im", "[", "sol3D", "]"}], "//", "ComplexExpand"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.602326135224457*^9, 3.602326197453821*^9}, 
   3.602326853551641*^9, {3.602327321916202*^9, 3.602327328827249*^9}, {
   3.602327785130978*^9, 3.602327847231689*^9}, {3.602329390118188*^9, 
   3.6023293907788563`*^9}, {3.602329978870062*^9, 3.60232998343251*^9}, {
   3.6023301817505283`*^9, 3.602330184192687*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol3Dre", "]"}]], "Input",
 CellChangeTimes->{{3.6023293983712997`*^9, 3.60232939924329*^9}}],

Cell["\<\
-((Power(D2x,2)*D3x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx + \
D1y*Ry + D1z*Rz) - D2x*Power(D3x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2x*D2y*D3x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2x,2)*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) - 
       2*D2x*D3x*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) + 
       Power(D2y,2)*D3x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2x*D2y*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       2*D2y*D3x*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2y,2)*D3y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2y*Power(D3y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) + 
       2*D2x*D2z*D3x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2x,2)*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) - 
       2*D2x*D3x*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) + 2*D2y*D2z*D3x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2x*D2z*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx + \
D1y*Ry + D1z*Rz) - 2*D2z*D3x*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2x*D2y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx + \
D1y*Ry + D1z*Rz) - 2*D2y*D3x*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) - 
       2*D2x*D3y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx + \
D1y*Ry + D1z*Rz) + 2*D2y*D2z*D3y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) - 
       D2z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2y,2)*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) - 
       2*D2y*D3y*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) + 
       Power(D2z,2)*D3x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2x*D2z*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       2*D2z*D3x*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2z,2)*D3y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       2*D2y*D2z*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       2*D2z*D3y*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D1x*Rx + D1y*Ry + D1z*Rz) + 
       Power(D2z,2)*D3z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       D2z*Power(D3z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D1x*Rx \
+ D1y*Ry + D1z*Rz) - 
       Power(D1x,2)*D3x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1x*Power(D3x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) - 
       2*D1x*D1y*D3x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1x,2)*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) + 
       2*D1x*D3x*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) - 
       Power(D1y,2)*D3x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       2*D1x*D1y*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       2*D1y*D3x*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1y,2)*D3y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1y*Power(D3y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) - 
       2*D1x*D1z*D3x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1x,2)*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) + 
       2*D1x*D3x*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) - 2*D1y*D1z*D3x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       2*D1x*D1z*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + \
D2y*Ry + D2z*Rz) + 2*D1z*D3x*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       2*D1x*D1y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + \
D2y*Ry + D2z*Rz) + 2*D1y*D3x*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) + 
       2*D1x*D3y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + \
D2y*Ry + D2z*Rz) - 2*D1y*D1z*D3y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) + 
       D1z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1y,2)*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) + 
       2*D1y*D3y*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) - 
       Power(D1z,2)*D3x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       2*D1x*D1z*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       2*D1z*D3x*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1z,2)*D3y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       2*D1y*D1z*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       2*D1z*D3y*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D2x*Rx + D2y*Ry + D2z*Rz) - 
       Power(D1z,2)*D3z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       D1z*Power(D3z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx \
+ D2y*Ry + D2z*Rz) + 
       Power(D1x,2)*D2x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1x*Power(D2x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) + 
       2*D1x*D1y*D2x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1y*Power(D2x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1x,2)*D2y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       2*D1x*D2x*D2y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) + 
       Power(D1y,2)*D2x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       2*D1x*D1y*D2y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       2*D1y*D2x*D2y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1x*Power(D2y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1y,2)*D2y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1y*Power(D2y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) + 
       2*D1x*D1z*D2x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1z*Power(D2x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1x,2)*D2z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       2*D1x*D2x*D2z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) + 2*D1y*D1z*D2x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       2*D1x*D1z*D2y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + \
D3y*Ry + D3z*Rz) - 2*D1z*D2x*D2y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       2*D1x*D1y*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + \
D3y*Ry + D3z*Rz) - 2*D1y*D2x*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       2*D1x*D2y*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + \
D3y*Ry + D3z*Rz) + 2*D1y*D1z*D2y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       D1z*Power(D2y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1y,2)*D2z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       2*D1y*D2y*D2z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) + 
       Power(D1z,2)*D2x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       2*D1x*D1z*D2z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       2*D1z*D2x*D2z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1x*Power(D2z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1z,2)*D2y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       2*D1y*D1z*D2z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       2*D1z*D2y*D2z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1y*Power(D2z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) + 
       Power(D1z,2)*D2z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - 
       D1z*Power(D2z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx \
+ D3y*Ry + D3z*Rz) - Power(D1x,2)*D2x*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + \
K0z*Rz) + 
       D1x*Power(D2x,2)*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1x,2)*D3x*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2x,2)*D3x*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1x*Power(D3x,2)*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2x*Power(D3x,2)*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1y*D2x*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1y*Power(D2x,2)*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1x,2)*D2y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D2x*D2y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1y*D3x*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D2y*D3x*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1y*Power(D3x,2)*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2y*Power(D3x,2)*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1x,2)*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2x,2)*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D3x*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D3x*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1y,2)*D2x*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1y*D2y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D2x*D2y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1x*Power(D2y,2)*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1y,2)*D3x*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2y,2)*D3x*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1y*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D2y*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D3x*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D3x*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1x*Power(D3y,2)*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2x*Power(D3y,2)*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1y,2)*D2y*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1y*Power(D2y,2)*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1y,2)*D3y*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2y,2)*D3y*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1y*Power(D3y,2)*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2y*Power(D3y,2)*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1z*D2x*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1z*Power(D2x,2)*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1x,2)*D2z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D2x*D2z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1z*D3x*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D2z*D3x*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1z*Power(D3x,2)*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2z*Power(D3x,2)*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1x,2)*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2x,2)*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D3x*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D3x*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D1z*D2x*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1z*D2y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1z*D2x*D2y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1y*D2z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D2x*D2z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D2y*D2z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3x*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2y*D2z*D3x*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D1z*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2z*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1z*D3x*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2z*D3x*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1y*D3x*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D3x*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D3y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D3y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D1z*D2y*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1z*Power(D2y,2)*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1y,2)*D2z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1y*D2y*D2z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3y*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2y*D2z*D3y*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1z*Power(D3y,2)*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2z*Power(D3y,2)*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1y,2)*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2y,2)*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D3y*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D3y*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2x*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1z*D2z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1z*D2x*D2z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1x*Power(D2z,2)*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3x*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2z,2)*D3x*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1z*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D2z*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1z*D3x*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2z*D3x*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1x*Power(D3z,2)*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2x*Power(D3z,2)*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2y*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1y*D1z*D2z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1z*D2y*D2z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1y*Power(D2z,2)*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3y*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2z,2)*D3y*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2y*D2z*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1z*D3y*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2z*D3y*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1y*Power(D3z,2)*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2y*Power(D3z,2)*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2z*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1z*Power(D2z,2)*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3z*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D2z,2)*D3z*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1z*Power(D3z,2)*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D2z*Power(D3z,2)*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2x,2)*D3x*Power(Rx,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       D2x*Power(D3x,2)*Power(Rx,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3x*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*D3y*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3x*D3y*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3x*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3y*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D2y*D3x*D3y*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3y*Power(Ry,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2y*Power(D3y,2)*Power(Ry,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D2x*D2z*D3x*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*D3z*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3x*D3z*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 2*D2y*D2z*D3x*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2z*D3y*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2z*D3x*D3y*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2y*D3x*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3y*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D2y*D2z*D3y*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3z*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2y*D3y*D3z*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3x*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2z*D3z*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D2z*D3x*D3z*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3y*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D2z*D3z*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D2z*D3y*D3z*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3z*Power(Rz,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D2z*Power(D3z,2)*Power(Rz,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       Power(D1x,2)*D3x*Power(Rx,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1x*Power(D3x,2)*Power(Rx,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D1x*D1y*D3x*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1x,2)*D3y*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D3x*D3y*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       Power(D1y,2)*D3x*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1y*D3y*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D1y*D3x*D3y*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1y,2)*D3y*Power(Ry,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1y*Power(D3y,2)*Power(Ry,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D1x*D1z*D3x*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1x,2)*D3z*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D3x*D3z*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 2*D1y*D1z*D3x*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1z*D3y*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D1z*D3x*D3y*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1y*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D1y*D3x*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D3y*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D1y*D1z*D3y*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       D1z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1y,2)*D3z*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1y*D3y*D3z*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       Power(D1z,2)*D3x*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D1z*D3z*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D1z*D3x*D3z*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1z,2)*D3y*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1y*D1z*D3z*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D1z*D3y*D3z*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D1z,2)*D3z*Power(Rz,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       D1z*Power(D3z,2)*Power(Rz,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       Power(D1x,2)*D2x*Power(Rx,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1x*Power(D2x,2)*Power(Rx,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D1x*D1y*D2x*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1y*Power(D2x,2)*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1x,2)*D2y*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D2x*D2y*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       Power(D1y,2)*D2x*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D1y*D2y*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D1y*D2x*D2y*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1x*Power(D2y,2)*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1y,2)*D2y*Power(Ry,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1y*Power(D2y,2)*Power(Ry,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       2*D1x*D1z*D2x*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1z*Power(D2x,2)*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1x,2)*D2z*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D2x*D2z*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 2*D1y*D1z*D2x*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D1z*D2y*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D1z*D2x*D2y*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D1y*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D1y*D2x*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1x*D2y*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D1y*D1z*D2y*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D1z*Power(D2y,2)*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1y,2)*D2z*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D1y*D2y*D2z*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
       Power(D1z,2)*D2x*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1x*D1z*D2z*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D1z*D2x*D2z*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1x*Power(D2z,2)*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1z,2)*D2y*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D1y*D1z*D2z*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       2*D1z*D2y*D2z*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
       D1y*Power(D2z,2)*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D1z,2)*D2z*Power(Rz,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - D1z*Power(D2z,2)*Power(Rz,3)*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz)
       )/((D1x*Rx + D1y*Ry + D1z*Rz)*(D1x*Rx - D2x*Rx + D1y*Ry - D2y*Ry + \
D1z*Rz - D2z*Rz)*(D2x*Rx + D2y*Ry + D2z*Rz)*(D3x*Rx + D3y*Ry + D3z*Rz)*
       (-(D1x*Rx) + D3x*Rx - D1y*Ry + D3y*Ry - D1z*Rz + D3z*Rz)*(-(D2x*Rx) + \
D3x*Rx - D2y*Ry + D3y*Ry - D2z*Rz + D3z*Rz)))\
\>", "Output",
 CellChangeTimes->{3.602329442016376*^9, 3.602329663336439*^9, 
  3.602330034072873*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol3Dim", "]"}]], "Input",
 CellChangeTimes->{{3.602329403221698*^9, 3.602329408858755*^9}}],

Cell["\<\
(-(Power(D1x,2)*D2x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)) + \
D1x*Power(D2x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2x,2)*D3x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1x*Power(D3x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D2x*Power(D3x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D2x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D1y*Power(D2x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D2y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D2x*D2y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D3x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2y*D3x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D2y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2x,2)*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D3x*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D3x*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D2x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1y*D2y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1y*D2x*D2y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D1x*Power(D2y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D3x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2y,2)*D3x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2y*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1y*D3x*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D3x*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D2x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D2y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D1y*Power(D2y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D3y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2y,2)*D3y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1y*Power(D3y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D2y*Power(D3y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D1z*Power(D2x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D2z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D2x*D2z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D3x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2z*D3x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
D2z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2x,2)*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D3x*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D3x*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D1z*D2x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1z*D2x*D2y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1x*D1y*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1y*D2x*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D2y*D2z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2y*D2z*D3x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1z*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2z*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1z*D3x*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2z*D3x*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2x*D2y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D3x*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D3x*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D3y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D3y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D1z*D2y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1z*Power(D2y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1y,2)*D2z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1y*D2y*D2z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2y*D2z*D3y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D2z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1y,2)*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D2y,2)*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1y*D3y*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D2y*D3y*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1z*D2x*D2z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1x*Power(D2z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1x*D1z*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2x*D2z*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1z*D3x*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D2z*D3x*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D2x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1y*D1z*D2z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1z*D2y*D2z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1y*Power(D2z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D1y*D1z*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2y*D2z*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D1z*D3y*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D2z*D3y*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D2y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D1z,2)*D2z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1z*Power(D2z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D1z,2)*D3z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
D1z*Power(D3z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D2z*Power(D3z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2x,2)*D3x*Power(Rx,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2x*Power(D3x,2)*Power(Rx,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2x*D2y*D3x*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2x,2)*D3y*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2x*D3x*D3y*Power(Rx,2)*Ry*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D2y,2)*D3x*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2x*D2y*D3y*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2y*D3x*D3y*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2y,2)*D3y*Power(Ry,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2y*Power(D3y,2)*Power(Ry,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2x*D2z*D3x*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2x,2)*D3z*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2x*D3x*D3z*Power(Rx,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D2y*D2z*D3x*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D2x*D2z*D3y*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D2z*D3x*D3y*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2x*D2y*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D2y*D3x*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2x*D3y*D3z*Rx*Ry*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D2y*D2z*D3y*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + \
D1z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D2z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2y,2)*D3z*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2y*D3y*D3z*Power(Ry,2)*Rz*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D2z,2)*D3x*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2x*D2z*D3z*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2z*D3x*D3z*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2z,2)*D3y*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2y*D2z*D3z*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2z*D3y*D3z*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D2z,2)*D3z*Power(Rz,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D2z*Power(D3z,2)*Power(Rz,3)*Cos(D1x*Rx + D1y*Ry + D1z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D3x*Power(Rx,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D3x,2)*Power(Rx,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D3x*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D3y*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D3x*D3y*Power(Rx,2)*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D3x*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D3y*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1y*D3x*D3y*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D3y*Power(Ry,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D3y,2)*Power(Ry,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D3x*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D3z*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D3x*D3z*Power(Rx,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D1y*D1z*D3x*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D3y*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1z*D3x*D3y*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1y*D3x*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D3y*D3z*Rx*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1y*D1z*D3y*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + \
D2z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D3z*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1y*D3y*D3z*Power(Ry,2)*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D3x*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D3z*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1z*D3x*D3z*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D3y*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1y*D1z*D3z*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1z*D3y*D3z*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D3z*Power(Rz,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1z*Power(D3z,2)*Power(Rz,3)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D2x*Power(Rx,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D2x,2)*Power(Rx,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D2x*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D2x,2)*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D2y*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D2x*D2y*Power(Rx,2)*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D2x*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D2y*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1y*D2x*D2y*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D2y,2)*Rx*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D2y*Power(Ry,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D2y,2)*Power(Ry,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D2x*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1z*Power(D2x,2)*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D2z*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D2x*D2z*Power(Rx,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D1y*D1z*D2x*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D2y*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1z*D2x*D2y*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1y*D2x*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D2y*D2z*Rx*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1y*D1z*D2y*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + \
D3z*Rz)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1z*Power(D2y,2)*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D2z*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1y*D2y*D2z*Power(Ry,2)*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D2x*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D2z*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1z*D2x*D2z*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D2z,2)*Rx*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D2y*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1y*D1z*D2z*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1z*D2y*D2z*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D2z,2)*Ry*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D2z*Power(Rz,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1z*Power(D2z,2)*Power(Rz,3)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D2x,2)*D3x*Power(Rx,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2x*Power(D3x,2)*Power(Rx,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2x*D2y*D3x*Power(Rx,2)*Ry*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2y*Power(D3x,2)*Power(Rx,2)*Ry*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2x,2)*D3y*Power(Rx,2)*Ry*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2x*D3x*D3y*Power(Rx,2)*Ry*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D2y,2)*D3x*Rx*Power(Ry,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2x*D2y*D3y*Rx*Power(Ry,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2y*D3x*D3y*Rx*Power(Ry,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2x*Power(D3y,2)*Rx*Power(Ry,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2y,2)*D3y*Power(Ry,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2y*Power(D3y,2)*Power(Ry,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2x*D2z*D3x*Power(Rx,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2z*Power(D3x,2)*Power(Rx,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2x,2)*D3z*Power(Rx,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2x*D3x*D3z*Power(Rx,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2y*D2z*D3x*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D2x*D2z*D3y*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D2z*D3x*D3y*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D2x*D2y*D3z*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D2y*D3x*D3z*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2x*D3y*D3z*Rx*Ry*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D2y*D2z*D3y*Power(Ry,2)*Rz*Sin(D1x*Rx + D1y*Ry + \
D1z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D2z*Power(D3y,2)*Power(Ry,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2y,2)*D3z*Power(Ry,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D2y*D3y*D3z*Power(Ry,2)*Rz*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3x*Rx*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2x*D2z*D3z*Rx*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2z*D3x*D3z*Rx*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2x*Power(D3z,2)*Rx*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3y*Ry*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D2y*D2z*D3z*Ry*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D2z*D3y*D3z*Ry*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2y*Power(D3z,2)*Ry*Power(Rz,2)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D2z,2)*D3z*Power(Rz,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D2z*Power(D3z,2)*Power(Rz,3)*Sin(D1x*Rx + D1y*Ry + D1z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3x*Power(Rx,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D3x,2)*Power(Rx,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D3x*Power(Rx,2)*Ry*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D3x,2)*Power(Rx,2)*Ry*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3y*Power(Rx,2)*Ry*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D3x*D3y*Power(Rx,2)*Ry*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D3x*Rx*Power(Ry,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D3y*Rx*Power(Ry,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1y*D3x*D3y*Rx*Power(Ry,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D3y,2)*Rx*Power(Ry,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D3y*Power(Ry,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D3y,2)*Power(Ry,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D3x*Power(Rx,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1z*Power(D3x,2)*Power(Rx,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1x,2)*D3z*Power(Rx,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D3x*D3z*Power(Rx,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D1y*D1z*D3x*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D3y*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1z*D3x*D3y*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D1y*D3z*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1y*D3x*D3z*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D3y*D3z*Rx*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1y*D1z*D3y*Power(Ry,2)*Rz*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
     D1z*Power(D3y,2)*Power(Ry,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1y,2)*D3z*Power(Ry,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1y*D3y*D3z*Power(Ry,2)*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D3x*Rx*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D1z*D3z*Rx*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1z*D3x*D3z*Rx*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1x*Power(D3z,2)*Rx*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D3y*Ry*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1y*D1z*D3z*Ry*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1z*D3y*D3z*Ry*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1y*Power(D3z,2)*Ry*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     Power(D1z,2)*D3z*Power(Rz,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     D1z*Power(D3z,2)*Power(Rz,3)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D2x*Power(Rx,3)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D2x,2)*Power(Rx,3)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D2x*Power(Rx,2)*Ry*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D2x,2)*Power(Rx,2)*Ry*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D2y*Power(Rx,2)*Ry*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D2x*D2y*Power(Rx,2)*Ry*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D2x*Rx*Power(Ry,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D2y*Rx*Power(Ry,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1y*D2x*D2y*Rx*Power(Ry,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D2y,2)*Rx*Power(Ry,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D2y*Power(Ry,3)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D2y,2)*Power(Ry,3)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2x*Power(Rx,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1z*Power(D2x,2)*Power(Rx,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1x,2)*D2z*Power(Rx,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1x*D2x*D2z*Power(Rx,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D1y*D1z*D2x*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2y*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1z*D2x*D2y*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     2*D1x*D1y*D2z*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) + 2*D1y*D2x*D2z*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1x*D2y*D2z*Rx*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + K0y*Ry \
+ K0z*Rz) - 2*D1y*D1z*D2y*Power(Ry,2)*Rz*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
     D1z*Power(D2y,2)*Power(Ry,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1y,2)*D2z*Power(Ry,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) + 
     2*D1y*D2y*D2z*Power(Ry,2)*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D2x*Rx*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1x*D1z*D2z*Rx*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1z*D2x*D2z*Rx*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1x*Power(D2z,2)*Rx*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D2y*Ry*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     2*D1y*D1z*D2z*Ry*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     2*D1z*D2y*D2z*Ry*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
     D1y*Power(D2z,2)*Ry*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx \
+ K0y*Ry + K0z*Rz) - 
     Power(D1z,2)*D2z*Power(Rz,3)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + D1z*Power(D2z,2)*Power(Rz,3)*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz)*Sin(K0x*Rx + K0y*Ry + K0z*Rz))/
   ((D1x*Rx + D1y*Ry + D1z*Rz)*(D1x*Rx - D2x*Rx + D1y*Ry - D2y*Ry + D1z*Rz - \
D2z*Rz)*(D2x*Rx + D2y*Ry + D2z*Rz)*(D1x*Rx - D3x*Rx + D1y*Ry - D3y*Ry + \
D1z*Rz - D3z*Rz)*
     (D2x*Rx - D3x*Rx + D2y*Ry - D3y*Ry + D2z*Rz - D3z*Rz)*(D3x*Rx + D3y*Ry + \
D3z*Rz))\
\>", "Output",
 CellChangeTimes->{3.602329442080072*^9, 3.60232966338838*^9, 
  3.602330034126297*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["special case:", "Subsection",
 CellChangeTimes->{{3.602328925143887*^9, 3.602328928303092*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sol3Db", " ", "=", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"Integrate", "[", 
        RowBox[{
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"E", "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"I", " ", "Rx", "*", 
               RowBox[{"(", 
                RowBox[{"K0x", "+", 
                 RowBox[{"D2x", " ", "t2"}], "+", 
                 RowBox[{"D3x", " ", "t3"}]}], ")"}]}], "+", 
              RowBox[{"I", " ", "Ry", "*", 
               RowBox[{"(", 
                RowBox[{"K0y", "+", 
                 RowBox[{"D2y", " ", "t2"}], "+", 
                 RowBox[{"D3y", " ", "t3"}]}], ")"}]}], "+", 
              RowBox[{"I", " ", "Rz", "*", 
               RowBox[{"(", 
                RowBox[{"K0z", "+", 
                 RowBox[{"D2z", " ", "t2"}], "+", 
                 RowBox[{"D3z", " ", "t3"}]}], ")"}]}]}], ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"t3", ",", "0", ",", 
             RowBox[{"1", "-", "t1", "-", "t2"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t2", ",", "0", ",", 
           RowBox[{"1", "-", "t1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t1", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
     "ComplexExpand"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol3Dbre", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", "sol3Db", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol3Dbim", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Im", "[", "sol3Db", "]"}], "//", "ComplexExpand"}], "//", 
    "Factor"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.602327347438868*^9, 3.602327355832542*^9}, {
  3.60232742088439*^9, 3.602327452491209*^9}, {3.60232803855014*^9, 
  3.6023280587615767`*^9}, {3.602328098112033*^9, 3.6023280982308598`*^9}, {
  3.6023294668356133`*^9, 3.6023294674731617`*^9}, {3.60232953103861*^9, 
  3.60232953136654*^9}, {3.6023299889956083`*^9, 3.6023299956423893`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol3Dbre", "]"}]], "Input",
 CellChangeTimes->{3.6023294851468563`*^9}],

Cell["\<\
-((Power(D2x,2)*D3x*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2x*Power(D3x,2)*Power(Rx,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2y*D3x*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2y*Power(D3x,2)*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2x,2)*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3x*D3y*Power(Rx,2)*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2y,2)*D3x*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2y*D3x*D3y*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2x*Power(D3y,2)*Rx*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2y,2)*D3y*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2y*Power(D3y,2)*Power(Ry,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2z*D3x*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2z*Power(D3x,2)*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2x,2)*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3x*D3z*Power(Rx,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D2z*D3x*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2z*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2z*D3x*D3y*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2y*D3x*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D3y*D3z*Rx*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D2z*D3y*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2z*Power(D3y,2)*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2y,2)*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2y*D3y*D3z*Power(Ry,2)*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2z,2)*D3x*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2z*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2z*D3x*D3z*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2x*Power(D3z,2)*Rx*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2z,2)*D3y*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D2z*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2z*D3y*D3z*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2y*Power(D3z,2)*Ry*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D2z,2)*D3z*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       D2z*Power(D3z,2)*Power(Rz,3)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D3x,2)*Power(Rx,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz) + 
       2*D3x*D3y*Rx*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz) + Power(D3y,2)*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + \
D2y*Ry + D2z*Rz) + 
       2*D3x*D3z*Rx*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz) + 2*D3y*D3z*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + D2y*Ry + \
D2z*Rz) + 
       Power(D3z,2)*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D2x*Rx + \
D2y*Ry + D2z*Rz) - Power(D2x,2)*Power(Rx,2)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz)*Sin(D3x*Rx + D3y*Ry + D3z*Rz) - 
       2*D2x*D2y*Rx*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz) - Power(D2y,2)*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + \
D3y*Ry + D3z*Rz) - 
       2*D2x*D2z*Rx*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz) - 2*D2y*D2z*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + D3y*Ry + \
D3z*Rz) - 
       Power(D2z,2)*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)*Sin(D3x*Rx + \
D3y*Ry + D3z*Rz) + Power(D2x,2)*Power(Rx,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D3x,2)*Power(Rx,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2y*Rx*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 2*D3x*D3y*Rx*Ry*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D3y,2)*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2z*Rx*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D3x*D3z*Rx*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D2z*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 2*D3y*D3z*Ry*Rz*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D3z,2)*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D3x,2)*Power(Rx,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D3x*D3y*Rx*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D3y,2)*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D3x*D3z*Rx*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       2*D3y*D3z*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + K0y*Ry + \
K0z*Rz) + Power(D3z,2)*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       Power(D2x,2)*Power(Rx,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2x*D2y*Rx*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       Power(D2y,2)*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2x*D2z*Rx*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       2*D2y*D2z*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + K0y*Ry + \
K0z*Rz) - Power(D2z,2)*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz))/
     (Power(D2x*Rx + D2y*Ry + D2z*Rz,2)*(D2x*Rx - D3x*Rx + D2y*Ry - D3y*Ry + \
D2z*Rz - D3z*Rz)*Power(D3x*Rx + D3y*Ry + D3z*Rz,2)))\
\>", "Output",
 CellChangeTimes->{3.602329552439897*^9, 3.6023296803470592`*^9, 
  3.602330050985589*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CForm", "[", "sol3Dbim", "]"}]], "Input",
 CellChangeTimes->{{3.60232947854722*^9, 3.602329482879672*^9}}],

Cell["\<\
-((-(Power(D2x,2)*Power(Rx,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz)) + \
Power(D3x,2)*Power(Rx,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D2y*Rx*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D3x*D3y*Rx*Ry*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2y,2)*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D3y,2)*Power(Ry,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2x*D2z*Rx*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D3x*D3z*Rx*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 2*D2y*D2z*Ry*Rz*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       2*D3y*D3z*Ry*Rz*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - \
Power(D2z,2)*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) + \
Power(D3z,2)*Power(Rz,2)*Cos(K0x*Rx + K0y*Ry + K0z*Rz) - 
       Power(D3x,2)*Power(Rx,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D3x*D3y*Rx*Ry*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       Power(D3y,2)*Power(Ry,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D3x*D3z*Rx*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       2*D3y*D3z*Ry*Rz*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz) - Power(D3z,2)*Power(Rz,2)*Cos(D2x*Rx + D2y*Ry + D2z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*Power(Rx,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D2x*D2y*Rx*Ry*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*Power(Ry,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D2x*D2z*Rx*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       2*D2y*D2z*Ry*Rz*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + K0y*Ry + \
K0z*Rz) + Power(D2z,2)*Power(Rz,2)*Cos(D3x*Rx + D3y*Ry + D3z*Rz)*Cos(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*D3x*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2x*Power(D3x,2)*Power(Rx,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3x*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2y*Power(D3x,2)*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D3x*D3y*Power(Rx,2)*Ry*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3x*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2y*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2y*D3x*D3y*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2x*Power(D3y,2)*Rx*Power(Ry,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3y*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2y*Power(D3y,2)*Power(Ry,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2z*D3x*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2z*Power(D3x,2)*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2x,2)*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D3x*D3z*Power(Rx,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D2z*D3x*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2z*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2z*D3x*D3y*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2x*D2y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2y*D3x*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2x*D3y*D3z*Rx*Ry*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       2*D2y*D2z*D3y*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2z*Power(D3y,2)*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2y,2)*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
2*D2y*D3y*D3z*Power(Ry,2)*Rz*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3x*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2x*D2z*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2z*D3x*D3z*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2x*Power(D3z,2)*Rx*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3y*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + \
2*D2y*D2z*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - 
       2*D2z*D3y*D3z*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2y*Power(D3z,2)*Ry*Power(Rz,2)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D2z,2)*D3z*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) - \
D2z*Power(D3z,2)*Power(Rz,3)*Sin(K0x*Rx + K0y*Ry + K0z*Rz) + 
       Power(D3x,2)*Power(Rx,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D3x*D3y*Rx*Ry*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       Power(D3y,2)*Power(Ry,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 2*D3x*D3z*Rx*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) + 
       2*D3y*D3z*Ry*Rz*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + K0y*Ry + \
K0z*Rz) + Power(D3z,2)*Power(Rz,2)*Sin(D2x*Rx + D2y*Ry + D2z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       Power(D2x,2)*Power(Rx,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2x*D2y*Rx*Ry*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       Power(D2y,2)*Power(Ry,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 2*D2x*D2z*Rx*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz) - 
       2*D2y*D2z*Ry*Rz*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + K0y*Ry + \
K0z*Rz) - Power(D2z,2)*Power(Rz,2)*Sin(D3x*Rx + D3y*Ry + D3z*Rz)*Sin(K0x*Rx + \
K0y*Ry + K0z*Rz))/
     (Power(D2x*Rx + D2y*Ry + D2z*Rz,2)*(D2x*Rx - D3x*Rx + D2y*Ry - D3y*Ry + \
D2z*Rz - D3z*Rz)*Power(D3x*Rx + D3y*Ry + D3z*Rz,2)))\
\>", "Output",
 CellChangeTimes->{3.602329552498102*^9, 3.602329680408228*^9, 
  3.602330051025971*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1582, 1300},
WindowMargins->{{Automatic, 87}, {Automatic, 0}},
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 27, \
2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 87, 1, 80, "Section"],
Cell[CellGroupData[{
Cell[691, 27, 103, 1, 44, "Subsection"],
Cell[797, 30, 1242, 33, 80, "Input"],
Cell[CellGroupData[{
Cell[2064, 67, 181, 3, 28, "Input"],
Cell[2248, 72, 235, 4, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2520, 81, 129, 2, 28, "Input"],
Cell[2652, 85, 217, 4, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2918, 95, 96, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[3039, 100, 949, 26, 114, "Input"],
Cell[3991, 128, 793, 25, 48, "Output"],
Cell[4787, 155, 213, 3, 28, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[5061, 165, 89, 1, 80, "Section"],
Cell[CellGroupData[{
Cell[5175, 170, 101, 1, 44, "Subsection"],
Cell[5279, 173, 1956, 48, 80, "Input"],
Cell[CellGroupData[{
Cell[7260, 225, 130, 2, 28, "Input"],
Cell[7393, 229, 1856, 32, 175, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9286, 266, 64, 1, 28, "Input"],
Cell[9353, 269, 1857, 32, 175, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11259, 307, 103, 1, 44, "Subsection"],
Cell[11365, 310, 1532, 42, 80, "Input"],
Cell[CellGroupData[{
Cell[12922, 356, 133, 2, 28, "Input"],
Cell[13058, 360, 371, 7, 55, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13466, 372, 131, 2, 28, "Input"],
Cell[13600, 376, 364, 7, 55, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14025, 390, 87, 1, 80, "Section"],
Cell[CellGroupData[{
Cell[14137, 395, 101, 1, 44, "Subsection"],
Cell[14241, 398, 2251, 56, 114, "Input"],
Cell[CellGroupData[{
Cell[16517, 458, 131, 2, 28, "Input"],
Cell[16651, 462, 29092, 521, 3655, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45780, 988, 130, 2, 28, "Input"],
Cell[45913, 992, 28609, 523, 3670, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74571, 1521, 101, 1, 44, "Subsection"],
Cell[74675, 1524, 2196, 55, 97, "Input"],
Cell[CellGroupData[{
Cell[76896, 1583, 109, 2, 28, "Input"],
Cell[77008, 1587, 5415, 89, 535, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82460, 1681, 130, 2, 28, "Input"],
Cell[82593, 1685, 5416, 89, 535, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
